[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "llm-hub"
version = "1.0.0"
description = "Zero-Configuration MCP Bridge for LM Studio"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "LLM Hub Contributors", email = "contributors@llm-hub.dev"}
]
maintainers = [
    {name = "LLM Hub Team", email = "team@llm-hub.dev"}
]
keywords = [
    "llm",
    "mcp",
    "model-context-protocol",
    "lm-studio",
    "ai",
    "machine-learning",
    "bridge",
    "gateway",
    "api"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Networking",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers"
]
requires-python = ">=3.11"
dependencies = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "httpx>=0.25.0",
    "pydantic>=2.4.0",
    "pydantic-settings>=2.0.0",
    "python-multipart>=0.0.6",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-dotenv>=1.0.0",
    "structlog>=23.1.0",
    "rich>=13.6.0",
    "click>=8.1.0",
    "aiofiles>=23.2.1",
    "asyncio-mqtt>=0.16.1"
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "black>=23.9.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.6.0",
    "bandit>=1.7.5",
    "pre-commit>=3.4.0",
    "httpx>=0.25.0"
]
test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "httpx>=0.25.0"
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocs-mermaid2-plugin>=1.1.0",
    "mkdocstrings[python]>=0.23.0"
]
monitoring = [
    "prometheus-client>=0.17.0",
    "opentelemetry-api>=1.20.0",
    "opentelemetry-sdk>=1.20.0",
    "opentelemetry-instrumentation-fastapi>=0.41b0"
]

[project.urls]
Homepage = "https://github.com/your-org/llm-hub"
Documentation = "https://github.com/your-org/llm-hub/tree/main/docs"
Repository = "https://github.com/your-org/llm-hub.git"
"Bug Tracker" = "https://github.com/your-org/llm-hub/issues"
Changelog = "https://github.com/your-org/llm-hub/blob/main/CHANGELOG.md"
"Security Policy" = "https://github.com/your-org/llm-hub/blob/main/SECURITY.md"

[project.scripts]
llm-hub = "llm_hub.cli:main"

[tool.setuptools.packages.find]
where = ["units"]
include = ["*"]
exclude = ["tests*"]

[tool.setuptools.package-data]
"*" = ["*.yml", "*.yaml", "*.json", "*.toml", "*.md"]

# =============================================================================
# BLACK CONFIGURATION
# =============================================================================

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

# =============================================================================
# ISORT CONFIGURATION
# =============================================================================

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["llm_hub"]
known_third_party = ["fastapi", "uvicorn", "httpx", "pydantic"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
default_section = "THIRDPARTY"
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# =============================================================================
# MYPY CONFIGURATION
# =============================================================================

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
show_error_context = true
pretty = true

[[tool.mypy.overrides]]
module = [
    "uvicorn.*",
    "structlog.*",
    "rich.*",
    "asyncio_mqtt.*"
]
ignore_missing_imports = true

# =============================================================================
# PYTEST CONFIGURATION
# =============================================================================

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=units",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80"
]
testpaths = [
    "units/*/tests",
    "tests"
]
python_files = [
    "test_*.py",
    "*_test.py"
]
python_classes = [
    "Test*"
]
python_functions = [
    "test_*"
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "asyncio: marks tests as async tests"
]
asyncio_mode = "auto"
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning"
]

# =============================================================================
# COVERAGE CONFIGURATION
# =============================================================================

[tool.coverage.run]
source = ["units"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
    "*/.venv/*"
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

# =============================================================================
# BANDIT CONFIGURATION
# =============================================================================

[tool.bandit]
exclude_dirs = ["tests", "test_*"]
skips = ["B101", "B601"]

# =============================================================================
# FLAKE8 CONFIGURATION (in setup.cfg format)
# =============================================================================

# Note: flake8 doesn't support pyproject.toml yet
# Configuration is in .flake8 or setup.cfg

# =============================================================================
# RUFF CONFIGURATION (Alternative to flake8)
# =============================================================================

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.isort]
known-first-party = ["llm_hub"]
