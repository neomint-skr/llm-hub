# LLM Hub Development Environment Configuration
# Copy this file to .env for local development

# =============================================================================
# DEVELOPMENT SETTINGS
# =============================================================================

# API Key for development (can be simple for local testing)
API_KEY=dev-key-12345

# Disable authentication for easier development
# WARNING: Never set this to false in production!
AUTH_ENABLED=false

# =============================================================================
# SERVICE CONFIGURATION
# =============================================================================

# Gateway service port (public endpoint)
GATEWAY_PORT=8080

# Bridge service port (internal)
MCP_PORT=3000

# LM Studio connection URL
# Use host.docker.internal for Docker Desktop on Windows/Mac
# Use localhost or 127.0.0.1 for native development
LM_STUDIO_URL=http://host.docker.internal:1234

# =============================================================================
# DEVELOPMENT PERFORMANCE SETTINGS
# =============================================================================

# High rate limit for development testing
RATE_LIMIT_PER_MINUTE=1000

# Faster polling for quick development feedback
POLL_INTERVAL=10

# =============================================================================
# DEVELOPMENT LOGGING
# =============================================================================

# Verbose logging for development
LOG_LEVEL=DEBUG

# Local log directory
LOG_DIR=./logs

# Local data directory
DATA_DIR=./data

# =============================================================================
# DOCKER CONFIGURATION
# =============================================================================

# Use latest images for development (or local builds)
VERSION=latest

# Service names
SERVICE_NAME_GATEWAY=unified-gateway
SERVICE_NAME_BRIDGE=lm-studio-bridge

# =============================================================================
# DEVELOPMENT NETWORK CONFIGURATION
# =============================================================================

# Docker network subnet
NETWORK_SUBNET=172.20.0.0/16

# =============================================================================
# DEVELOPMENT MONITORING (optional)
# =============================================================================

# Enable monitoring for development testing
ENABLE_MONITORING=true

# Prometheus port
PROMETHEUS_PORT=9090

# Enable log aggregation for development
ENABLE_LOG_AGGREGATION=false

# =============================================================================
# DEVELOPMENT RESOURCE LIMITS (relaxed)
# =============================================================================

# Gateway resource limits (generous for development)
GATEWAY_MEMORY_LIMIT=1G
GATEWAY_CPU_LIMIT=1.0

# Bridge resource limits (generous for development)
BRIDGE_MEMORY_LIMIT=512M
BRIDGE_CPU_LIMIT=0.5

# =============================================================================
# DEVELOPMENT HEALTH CHECKS (faster)
# =============================================================================

# Faster health checks for development
HEALTH_CHECK_INTERVAL=15
HEALTH_CHECK_TIMEOUT=5
HEALTH_CHECK_RETRIES=2

# =============================================================================
# DEVELOPMENT TESTING CONFIGURATION
# =============================================================================

# Test API key for automated tests
TEST_API_KEY=test-key-for-ci

# Mock server configuration
MOCK_LM_STUDIO_PORT=1234
MOCK_SERVER_ENABLED=false

# =============================================================================
# DEVELOPMENT FEATURES
# =============================================================================

# Enable development features
DEV_MODE=true

# Enable hot reload (if supported)
HOT_RELOAD=true

# Enable debug endpoints
DEBUG_ENDPOINTS=true

# Enable CORS for all origins (development only)
CORS_ALLOW_ALL=true

# =============================================================================
# LOCAL DEVELOPMENT NOTES
# =============================================================================

# For local development:
# 1. Start LM Studio with local server enabled
# 2. Load a model in LM Studio
# 3. Copy this file to .env
# 4. Run: start.bat (Windows) or docker-compose up (Linux/Mac)
# 5. Access gateway at http://localhost:8080
# 6. Access bridge at http://localhost:3000

# =============================================================================
# DEVELOPMENT TESTING
# =============================================================================

# Test endpoints:
# - Health: curl http://localhost:8080/health
# - Tools: curl http://localhost:8080/mcp/tools
# - Inference: curl -X POST -H "Content-Type: application/json" \
#   -d '{"parameters":{"prompt":"Hello","model":"your-model"}}' \
#   http://localhost:8080/tools/inference

# =============================================================================
# DEVELOPMENT TROUBLESHOOTING
# =============================================================================

# Common issues:
# 1. Port conflicts: Change GATEWAY_PORT or MCP_PORT
# 2. LM Studio not accessible: Check LM_STUDIO_URL
# 3. Docker issues: Restart Docker Desktop
# 4. Permission issues: Check file permissions

# Debug commands:
# - Check logs: docker-compose logs
# - Check containers: docker-compose ps
# - Check networks: docker network ls
# - Test LM Studio: curl http://localhost:1234/v1/models

# =============================================================================
# DEVELOPMENT SECURITY NOTES
# =============================================================================

# Development security considerations:
# 1. AUTH_ENABLED=false is OK for local development only
# 2. Never use development settings in production
# 3. Don't commit real API keys to version control
# 4. Use different API keys for different environments
# 5. Regularly update development dependencies

# =============================================================================
# DEVELOPMENT PERFORMANCE NOTES
# =============================================================================

# Development performance tips:
# 1. Use DEBUG log level to see detailed information
# 2. Fast polling (POLL_INTERVAL=10) for quick feedback
# 3. High rate limits for testing
# 4. Generous resource limits to avoid constraints
# 5. Enable monitoring to understand performance characteristics
